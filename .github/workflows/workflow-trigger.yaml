##Copyright Â© Amazon.com and Affiliates: This deliverable is considered Developed Content as defined in the AWS Service Terms and the SOW between the parties dated [date].

name: Create payload.json and PR

on:
  workflow_dispatch:
    inputs:
      RequestParameters:
        description: 'Request Parameters JSON'
        required: true

jobs:
  create-file-and-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up environment and create parameter files
        env:
            REQUEST_PARAMETERS: ${{ github.event.inputs.RequestParameters }}
            RESOURCE_PARAMETERS: ${{ github.event.inputs.ResourceParameters }}
        run: |
          # Parse RequestParameters
          REQUEST_PARAMS="$REQUEST_PARAMETERS"
          # RESOURCE_PARAMS="$RESOURCE_PARAMETERS"
          
          REQUEST_ID=$(echo "$REQUEST_PARAMS" | jq -r '.RequestId')
          REQUEST_TYPE=$(echo "$REQUEST_PARAMS" | jq -r '.RequestType')
          SOLUTION_TYPE=$(echo "$REQUEST_PARAMS" | jq -r '.SolutionType')
          ACCOUNT_ID=$(echo "$REQUEST_PARAMS" | jq -r '.AccountId')
          REGION_ID=$(echo "$REQUEST_PARAMS" | jq -r '.RegionId')
          TENANT_NAME=$(echo "$REQUEST_PARAMS" | jq -r '.TenantName')
          ENVIRONMENT_ID=$(echo "$REQUEST_PARAMS" | jq -r '.EnvironmentId')
          SUFFIX=$(echo "$REQUEST_PARAMS" | jq -r '.Suffix')
          
          BASE_PATH="${ENVIRONMENT_ID}/${REGION_ID}/${ACCOUNT_ID}"
          
          # Validate that the resource type has a corresponding directory
          if [ ! -d "$BASE_PATH" ]; then
            echo "Error: No directory found"
            exit 1
          fi
          
          TARGET_PATH="${BASE_PATH}/${TENANT_NAME}/${SOLUTION_TYPE}"
          mkdir -p "$TARGET_PATH"
          
          # Create payload.json
          cat <<EOF > $TARGET_PATH/terragrunt.stack.hcl
          locals {
            name = "$TENANT_NAME"

            # NOTE: This is only defined here to make this example simple.
            # Don't actually store credentials for your DB in plain text!
            db_username = "admin"
            db_password = "password"
          }

          unit "service" {
            // You'll typically want to pin this to a particular version of your catalog repo.
            // e.g.
            // source = "git::git@github.com:gruntwork-io/terragrunt-infrastructure-catalog-example.git//units/ec2-asg-stateful-service?ref=v0.1.0"
            source = "git::https://github.com/amirkk2757/terragrunt-infrastructure-catalog.git//units/ec2-asg-stateful-service"

            path = "service"

            values = {
              // This version here is used as the version passed down to the unit
              // to use when fetching the OpenTofu/Terraform module.
              version = "main"

              name          = local.name
              instance_type = "t4g.micro"
              min_size      = 2
              max_size      = 4
              server_port   = 3000
              alb_port      = 80

              db_path     = "../db"
              asg_sg_path = "../sgs/asg"

              // This is used for the userdata script that
              // bootstraps the EC2 instances.
              db_username = local.db_username
              db_password = local.db_password
            }
          }

          unit "db" {
            // You'll typically want to pin this to a particular version of your catalog repo.
            // e.g.
            // source = "git::git@github.com:gruntwork-io/terragrunt-infrastructure-catalog-example.git//units/mysql?ref=v0.1.0"
            source = "git::https://github.com/amirkk2757/terragrunt-infrastructure-catalog.git//units/mysql"

            path = "db"

            values = {
              // This version here is used as the version passed down to the unit
              // to use when fetching the OpenTofu/Terraform module.
              version = "main"

              name              = local.name
              instance_class    = "db.t4g.micro"
              allocated_storage = 20
              storage_type      = "gp2"

              # NOTE: This is only here to make it easier to spin up and tear down the stack.
              # Do not use any of these settings in production.
              master_username     = local.db_username
              master_password     = local.db_password
              skip_final_snapshot = true
            }
          }

          // We create the security group outside of the ASG unit because
          // we want to handle the wiring of the ASG to the security group
          // to the DB before we start provisioning the service unit.
          unit "asg_sg" {
            // You'll typically want to pin this to a particular version of your catalog repo.
            // e.g.
            // source = "git::git@github.com:gruntwork-io/terragrunt-infrastructure-catalog-example.git//units/sg?ref=v0.1.0"
            source = "git::https://github.com/amirkk2757/terragrunt-infrastructure-catalog.git//units/sg"

            path = "sgs/asg"

            values = {
              // This version here is used as the version passed down to the unit
              // to use when fetching the OpenTofu/Terraform module.
              version = "main"

              name = local.name
            }
          }

          unit "sg_to_db_sg_rule" {
            // You'll typically want to pin this to a particular version of your catalog repo.
            // e.g.
            // source = "git::git@github.com:gruntwork-io/terragrunt-infrastructure-catalog-example.git//units/sg-to-db-sg-rule?ref=v0.1.0"
            source = "git::https://github.com/amirkk2757/terragrunt-infrastructure-catalog.git//units/sg-to-db-sg-rule"

            path = "rules/sg-to-db-sg-rule"

            values = {
              // This version here is used as the version passed down to the unit
              // to use when fetching the OpenTofu/Terraform module.
              version = "main"

              // These paths are used for relative references
              // to the service and db units as dependencies.
              sg_path = "../../sgs/asg"
              db_path = "../../db"
            }
          }
          EOF
          
          echo "TARGET_PATH=${TARGET_PATH}" >> $GITHUB_ENV
          

      - name: Set up Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Create new branch from main
        run: |
          git checkout main
          git pull origin main
          BRANCH_NAME="terragrunt-automation-$(date +%Y%m%d-%H%M%S)"
          git checkout -b $BRANCH_NAME
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git add .
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "Create terragrunt stack file for ${{ env.TARGET_PATH }}"
            git push origin ${{ env.BRANCH_NAME }}
            PR_URL=$(gh pr create --title "Create terragrunt stack file for ${{ env.TARGET_PATH }}" --body "This PR creates the payload.json file with the provided inputs in the specified directory structure." --base main --head ${{ env.BRANCH_NAME }})
            echo "Pull request created: $PR_URL"
          else
            echo "No changes to commit"
          fi
