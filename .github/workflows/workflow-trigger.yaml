##Copyright Â© Amazon.com and Affiliates: This deliverable is considered Developed Content as defined in the AWS Service Terms and the SOW between the parties dated [date].

name: Create payload.json and PR

on:
  workflow_dispatch:
    inputs:
      RequestParameters:
        description: 'Request Parameters JSON'
        required: true
      ResourceParameters:
        description: 'Resource Parameters JSON'
        required: true

jobs:
  create-file-and-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up environment and create parameter files
        env:
            REQUEST_PARAMETERS: ${{ github.event.inputs.RequestParameters }}
            RESOURCE_PARAMETERS: ${{ github.event.inputs.ResourceParameters }}
        run: |
          # Parse RequestParameters
          REQUEST_PARAMS="$REQUEST_PARAMETERS"
          RESOURCE_PARAMS="$RESOURCE_PARAMETERS"
          
          REQUEST_ID=$(echo "$REQUEST_PARAMS" | jq -r '.RequestId')
          REQUEST_TYPE=$(echo "$REQUEST_PARAMS" | jq -r '.RequestType')
          SOLUTION_TYPE=$(echo "$REQUEST_PARAMS" | jq -r '.ResourceType')
          ACCOUNT_ID=$(echo "$REQUEST_PARAMS" | jq -r '.AccountId')
          REGION_ID=$(echo "$REQUEST_PARAMS" | jq -r '.RegionId')
          TENANT_NAME=$(echo "$REQUEST_PARAMS" | jq -r '.ApplicationName')
          ENVIRONMENT_ID=$(echo "$REQUEST_PARAMS" | jq -r '.EnvironmentId')
          SUFFIX=$(echo "$REQUEST_PARAMS" | jq -r '.Suffix')
          
          BASE_PATH="${ENVIRONMENT_ID}/${REGION_ID}/${ACCOUNT_ID}"
          
          # Validate that the resource type has a corresponding directory
          if [ ! -d "$BASE_PATH" ]; then
            echo "Error: No directory found"
            exit 1
          fi
          
          TARGET_PATH="${BASE_PATH}/${TENANT_NAME}/${SOLUTION_TYPE}"
          mkdir -p "$TARGET_PATH"
          
          # Create payload.json
          cat <<EOF > $TARGET_PATH/terragrunt.stack.hcl
          Line 1: Hello
          Line 2: Written using cat
          EOF
          
          echo "RESOURCE_NAME=${APPLICATION_NAME}_${DIVISION_NAME}_${RESOURCE_TYPE}_${SUFFIX}" >> $GITHUB_ENV
          echo "DIR_PATH=$DIR_PATH" >> $GITHUB_ENV

      - name: Set up Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Create new branch from main
        run: |
          git checkout main
          git pull origin main
          BRANCH_NAME="terragrunt-automation-$(date +%Y%m%d-%H%M%S)"
          git checkout -b $BRANCH_NAME
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git add .
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "Create payload.json for ${{ env.RESOURCE_NAME }}"
            git push origin ${{ env.BRANCH_NAME }}
            PR_URL=$(gh pr create --title "Create payload.json for ${{ env.RESOURCE_NAME }}" --body "This PR creates the payload.json file with the provided inputs in the specified directory structure." --base main --head ${{ env.BRANCH_NAME }})
            echo "Pull request created: $PR_URL"
          else
            echo "No changes to commit"
          fi
